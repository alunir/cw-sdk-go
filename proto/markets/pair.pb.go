// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: markets/pair.proto

package ProtobufMarkets

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PairUpdateMessage struct {
	Pair uint64 `protobuf:"varint,1,opt,name=pair,proto3" json:"pair,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*PairUpdateMessage_VwapUpdate
	//	*PairUpdateMessage_PerformanceUpdate
	//	*PairUpdateMessage_TrendlineUpdate
	Update               isPairUpdateMessage_Update `protobuf_oneof:"Update"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PairUpdateMessage) Reset()         { *m = PairUpdateMessage{} }
func (m *PairUpdateMessage) String() string { return proto.CompactTextString(m) }
func (*PairUpdateMessage) ProtoMessage()    {}
func (*PairUpdateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_pair_2d4ec62a2daa93f7, []int{0}
}
func (m *PairUpdateMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairUpdateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairUpdateMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PairUpdateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairUpdateMessage.Merge(dst, src)
}
func (m *PairUpdateMessage) XXX_Size() int {
	return m.Size()
}
func (m *PairUpdateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PairUpdateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PairUpdateMessage proto.InternalMessageInfo

type isPairUpdateMessage_Update interface {
	isPairUpdateMessage_Update()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PairUpdateMessage_VwapUpdate struct {
	VwapUpdate *PairVwapUpdate `protobuf:"bytes,2,opt,name=vwapUpdate,proto3,oneof"`
}
type PairUpdateMessage_PerformanceUpdate struct {
	PerformanceUpdate *PairPerformanceUpdate `protobuf:"bytes,3,opt,name=performanceUpdate,proto3,oneof"`
}
type PairUpdateMessage_TrendlineUpdate struct {
	TrendlineUpdate *PairTrendlineUpdate `protobuf:"bytes,4,opt,name=trendlineUpdate,proto3,oneof"`
}

func (*PairUpdateMessage_VwapUpdate) isPairUpdateMessage_Update()        {}
func (*PairUpdateMessage_PerformanceUpdate) isPairUpdateMessage_Update() {}
func (*PairUpdateMessage_TrendlineUpdate) isPairUpdateMessage_Update()   {}

func (m *PairUpdateMessage) GetUpdate() isPairUpdateMessage_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *PairUpdateMessage) GetPair() uint64 {
	if m != nil {
		return m.Pair
	}
	return 0
}

func (m *PairUpdateMessage) GetVwapUpdate() *PairVwapUpdate {
	if x, ok := m.GetUpdate().(*PairUpdateMessage_VwapUpdate); ok {
		return x.VwapUpdate
	}
	return nil
}

func (m *PairUpdateMessage) GetPerformanceUpdate() *PairPerformanceUpdate {
	if x, ok := m.GetUpdate().(*PairUpdateMessage_PerformanceUpdate); ok {
		return x.PerformanceUpdate
	}
	return nil
}

func (m *PairUpdateMessage) GetTrendlineUpdate() *PairTrendlineUpdate {
	if x, ok := m.GetUpdate().(*PairUpdateMessage_TrendlineUpdate); ok {
		return x.TrendlineUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PairUpdateMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PairUpdateMessage_OneofMarshaler, _PairUpdateMessage_OneofUnmarshaler, _PairUpdateMessage_OneofSizer, []interface{}{
		(*PairUpdateMessage_VwapUpdate)(nil),
		(*PairUpdateMessage_PerformanceUpdate)(nil),
		(*PairUpdateMessage_TrendlineUpdate)(nil),
	}
}

func _PairUpdateMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PairUpdateMessage)
	// Update
	switch x := m.Update.(type) {
	case *PairUpdateMessage_VwapUpdate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VwapUpdate); err != nil {
			return err
		}
	case *PairUpdateMessage_PerformanceUpdate:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PerformanceUpdate); err != nil {
			return err
		}
	case *PairUpdateMessage_TrendlineUpdate:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TrendlineUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PairUpdateMessage.Update has unexpected type %T", x)
	}
	return nil
}

func _PairUpdateMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PairUpdateMessage)
	switch tag {
	case 2: // Update.vwapUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PairVwapUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &PairUpdateMessage_VwapUpdate{msg}
		return true, err
	case 3: // Update.performanceUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PairPerformanceUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &PairUpdateMessage_PerformanceUpdate{msg}
		return true, err
	case 4: // Update.trendlineUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PairTrendlineUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &PairUpdateMessage_TrendlineUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PairUpdateMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PairUpdateMessage)
	// Update
	switch x := m.Update.(type) {
	case *PairUpdateMessage_VwapUpdate:
		s := proto.Size(x.VwapUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PairUpdateMessage_PerformanceUpdate:
		s := proto.Size(x.PerformanceUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PairUpdateMessage_TrendlineUpdate:
		s := proto.Size(x.TrendlineUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PairVwapUpdate struct {
	Vwap                 float64  `protobuf:"fixed64,1,opt,name=vwap,proto3" json:"vwap,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimestampNano        int64    `protobuf:"varint,3,opt,name=timestampNano,proto3" json:"timestampNano,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairVwapUpdate) Reset()         { *m = PairVwapUpdate{} }
func (m *PairVwapUpdate) String() string { return proto.CompactTextString(m) }
func (*PairVwapUpdate) ProtoMessage()    {}
func (*PairVwapUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_pair_2d4ec62a2daa93f7, []int{1}
}
func (m *PairVwapUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairVwapUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairVwapUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PairVwapUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairVwapUpdate.Merge(dst, src)
}
func (m *PairVwapUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PairVwapUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PairVwapUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PairVwapUpdate proto.InternalMessageInfo

func (m *PairVwapUpdate) GetVwap() float64 {
	if m != nil {
		return m.Vwap
	}
	return 0
}

func (m *PairVwapUpdate) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PairVwapUpdate) GetTimestampNano() int64 {
	if m != nil {
		return m.TimestampNano
	}
	return 0
}

type PairPerformanceUpdate struct {
	Window               string   `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Performance          float64  `protobuf:"fixed64,2,opt,name=performance,proto3" json:"performance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairPerformanceUpdate) Reset()         { *m = PairPerformanceUpdate{} }
func (m *PairPerformanceUpdate) String() string { return proto.CompactTextString(m) }
func (*PairPerformanceUpdate) ProtoMessage()    {}
func (*PairPerformanceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_pair_2d4ec62a2daa93f7, []int{2}
}
func (m *PairPerformanceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairPerformanceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairPerformanceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PairPerformanceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairPerformanceUpdate.Merge(dst, src)
}
func (m *PairPerformanceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PairPerformanceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PairPerformanceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PairPerformanceUpdate proto.InternalMessageInfo

func (m *PairPerformanceUpdate) GetWindow() string {
	if m != nil {
		return m.Window
	}
	return ""
}

func (m *PairPerformanceUpdate) GetPerformance() float64 {
	if m != nil {
		return m.Performance
	}
	return 0
}

type PairTrendlineUpdate struct {
	Window               string   `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Price                string   `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Volume               string   `protobuf:"bytes,4,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairTrendlineUpdate) Reset()         { *m = PairTrendlineUpdate{} }
func (m *PairTrendlineUpdate) String() string { return proto.CompactTextString(m) }
func (*PairTrendlineUpdate) ProtoMessage()    {}
func (*PairTrendlineUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_pair_2d4ec62a2daa93f7, []int{3}
}
func (m *PairTrendlineUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PairTrendlineUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PairTrendlineUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PairTrendlineUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairTrendlineUpdate.Merge(dst, src)
}
func (m *PairTrendlineUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PairTrendlineUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PairTrendlineUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PairTrendlineUpdate proto.InternalMessageInfo

func (m *PairTrendlineUpdate) GetWindow() string {
	if m != nil {
		return m.Window
	}
	return ""
}

func (m *PairTrendlineUpdate) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PairTrendlineUpdate) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *PairTrendlineUpdate) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func init() {
	proto.RegisterType((*PairUpdateMessage)(nil), "ProtobufMarkets.PairUpdateMessage")
	proto.RegisterType((*PairVwapUpdate)(nil), "ProtobufMarkets.PairVwapUpdate")
	proto.RegisterType((*PairPerformanceUpdate)(nil), "ProtobufMarkets.PairPerformanceUpdate")
	proto.RegisterType((*PairTrendlineUpdate)(nil), "ProtobufMarkets.PairTrendlineUpdate")
}
func (m *PairUpdateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairUpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pair != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.Pair))
	}
	if m.Update != nil {
		nn1, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PairUpdateMessage_VwapUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VwapUpdate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.VwapUpdate.Size()))
		n2, err := m.VwapUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PairUpdateMessage_PerformanceUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PerformanceUpdate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.PerformanceUpdate.Size()))
		n3, err := m.PerformanceUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *PairUpdateMessage_TrendlineUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TrendlineUpdate != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.TrendlineUpdate.Size()))
		n4, err := m.TrendlineUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *PairVwapUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairVwapUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vwap != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Vwap))))
		i += 8
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.Timestamp))
	}
	if m.TimestampNano != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.TimestampNano))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PairPerformanceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairPerformanceUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Window) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPair(dAtA, i, uint64(len(m.Window)))
		i += copy(dAtA[i:], m.Window)
	}
	if m.Performance != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Performance))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PairTrendlineUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PairTrendlineUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Window) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPair(dAtA, i, uint64(len(m.Window)))
		i += copy(dAtA[i:], m.Window)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPair(dAtA, i, uint64(m.Time))
	}
	if len(m.Price) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPair(dAtA, i, uint64(len(m.Price)))
		i += copy(dAtA[i:], m.Price)
	}
	if len(m.Volume) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPair(dAtA, i, uint64(len(m.Volume)))
		i += copy(dAtA[i:], m.Volume)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPair(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PairUpdateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pair != 0 {
		n += 1 + sovPair(uint64(m.Pair))
	}
	if m.Update != nil {
		n += m.Update.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PairUpdateMessage_VwapUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VwapUpdate != nil {
		l = m.VwapUpdate.Size()
		n += 1 + l + sovPair(uint64(l))
	}
	return n
}
func (m *PairUpdateMessage_PerformanceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerformanceUpdate != nil {
		l = m.PerformanceUpdate.Size()
		n += 1 + l + sovPair(uint64(l))
	}
	return n
}
func (m *PairUpdateMessage_TrendlineUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrendlineUpdate != nil {
		l = m.TrendlineUpdate.Size()
		n += 1 + l + sovPair(uint64(l))
	}
	return n
}
func (m *PairVwapUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vwap != 0 {
		n += 9
	}
	if m.Timestamp != 0 {
		n += 1 + sovPair(uint64(m.Timestamp))
	}
	if m.TimestampNano != 0 {
		n += 1 + sovPair(uint64(m.TimestampNano))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PairPerformanceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Window)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	if m.Performance != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PairTrendlineUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Window)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovPair(uint64(m.Time))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.Volume)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPair(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPair(x uint64) (n int) {
	return sovPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PairUpdateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairUpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairUpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			m.Pair = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pair |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VwapUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PairVwapUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &PairUpdateMessage_VwapUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PairPerformanceUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &PairUpdateMessage_PerformanceUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrendlineUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PairTrendlineUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &PairUpdateMessage_TrendlineUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairVwapUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairVwapUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairVwapUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vwap", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Vwap = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampNano", wireType)
			}
			m.TimestampNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampNano |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairPerformanceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairPerformanceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairPerformanceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Window = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Performance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Performance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PairTrendlineUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PairTrendlineUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PairTrendlineUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Window = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPair
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPair
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPair(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPair = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPair   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("markets/pair.proto", fileDescriptor_pair_2d4ec62a2daa93f7) }

var fileDescriptor_pair_2d4ec62a2daa93f7 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xbb, 0x50, 0x89, 0x1d, 0xa2, 0xc8, 0xf8, 0x27, 0x1c, 0x4c, 0x25, 0x0d, 0x31, 0x9c,
	0x30, 0xd1, 0x27, 0x90, 0x13, 0x17, 0x4c, 0xdd, 0x28, 0xf7, 0x05, 0x16, 0x6d, 0xa4, 0xdd, 0xcd,
	0xb6, 0xc0, 0xab, 0x78, 0xf2, 0x79, 0x3c, 0xfa, 0x08, 0x06, 0x5f, 0xc4, 0xec, 0x6e, 0x45, 0xa8,
	0xf5, 0xd4, 0x99, 0xe9, 0x37, 0xbf, 0xed, 0xf7, 0x75, 0x01, 0x63, 0xa6, 0x5e, 0x78, 0x96, 0x5e,
	0x49, 0x16, 0xa9, 0x9e, 0x54, 0x22, 0x13, 0xd8, 0x08, 0xf5, 0x63, 0xbc, 0x98, 0x0d, 0xed, 0xbb,
	0xe0, 0xad, 0x02, 0xcd, 0x90, 0x45, 0xea, 0x51, 0x4e, 0x59, 0xc6, 0x87, 0x3c, 0x4d, 0xd9, 0x13,
	0x47, 0x04, 0x57, 0x2f, 0xb5, 0x48, 0x9b, 0x74, 0x5d, 0x6a, 0x6a, 0xbc, 0x05, 0x58, 0xae, 0x98,
	0xb4, 0xc2, 0x56, 0xa5, 0x4d, 0xba, 0xf5, 0xeb, 0x8b, 0x5e, 0x81, 0xd7, 0xd3, 0xac, 0xd1, 0x46,
	0x36, 0x70, 0xe8, 0xd6, 0x12, 0x8e, 0xa0, 0x29, 0xb9, 0x9a, 0x09, 0x15, 0xb3, 0x64, 0xc2, 0x73,
	0x52, 0xd5, 0x90, 0x2e, 0x4b, 0x49, 0x61, 0x51, 0x3d, 0x70, 0xe8, 0x5f, 0x04, 0x86, 0xd0, 0xc8,
	0x14, 0x4f, 0xa6, 0xf3, 0x28, 0xf9, 0xa1, 0xba, 0x86, 0xda, 0x29, 0xa5, 0x3e, 0xec, 0x6a, 0x07,
	0x0e, 0x2d, 0xae, 0xf7, 0xf7, 0xa1, 0x66, 0xab, 0xe0, 0x19, 0x0e, 0x77, 0x3d, 0xe9, 0x70, 0xb4,
	0x27, 0x13, 0x0e, 0xa1, 0xa6, 0xc6, 0x73, 0xf0, 0xb2, 0x28, 0xe6, 0x69, 0xc6, 0x62, 0x69, 0xb2,
	0xa9, 0xd2, 0xdf, 0x01, 0x76, 0xe0, 0x60, 0xd3, 0xdc, 0xb1, 0x44, 0x18, 0xcf, 0x55, 0xba, 0x3b,
	0x0c, 0xee, 0xe1, 0xb4, 0xd4, 0x33, 0x9e, 0x41, 0x6d, 0x15, 0x25, 0x53, 0xb1, 0x32, 0x47, 0x7a,
	0x34, 0xef, 0xb0, 0x0d, 0xf5, 0xad, 0x2c, 0xcc, 0xb1, 0x84, 0x6e, 0x8f, 0x02, 0x01, 0xc7, 0x25,
	0x86, 0xff, 0x05, 0x22, 0xb8, 0xfa, 0x93, 0x72, 0x03, 0xa6, 0xc6, 0x13, 0xd8, 0x93, 0x2a, 0x9a,
	0xd8, 0xff, 0xe4, 0x51, 0xdb, 0x68, 0xc2, 0x52, 0xcc, 0x17, 0xb1, 0x0d, 0xda, 0xa3, 0x79, 0xd7,
	0x3f, 0x7a, 0x5f, 0xfb, 0xe4, 0x63, 0xed, 0x93, 0xcf, 0xb5, 0x4f, 0x5e, 0xbf, 0x7c, 0x67, 0x5c,
	0x33, 0x17, 0xef, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x87, 0xed, 0x10, 0x4d, 0x8e, 0x02, 0x00,
	0x00,
}
